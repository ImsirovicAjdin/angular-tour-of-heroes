/* Application-wide Styles */
h1 {
    color: #369;
    font-family: Arial, Helvetica, sans-serif;
    font-size: 250%;
  }
  h2, h3 {
    color: #444;
    font-family: Arial, Helvetica, sans-serif;
    font-weight: lighter;
  }
  body {
    margin: 2em;
  }
  body, input[type="text"], button {
    color: #888;
    font-family: Cambria, Georgia;
  }
  /* everywhere else */
  * {
    font-family: Arial, Helvetica, sans-serif;
  }

/*
Master/Detail Components

At the moment, the HeroesComponent displays both the list of heroes and the selected hero's details.

Keeping all features in one component as the application grows will not be maintainable. You'll want to split up large components into smaller sub-components, each focused on a specific task or workflow.

In this page, you'll take the first step in that direction by moving the hero details into a separate, reusable HeroDetailComponent.

The HeroesComponent will only present the list of heroes. The HeroDetailComponent will present details of a selected hero.

Make the HeroDetailComponent
Use the Angular CLI to generate a new component named hero-detail.

ng generate component hero-detail

The command scaffolds the following:

Creates a directory src/app/hero-detail.
Inside that directory four files are generated:

A CSS file for the component styles.
An HTML file for the component template.
A TypeScript file with a component class named HeroDetailComponent.
A test file for the HeroDetailComponent class.
The command also adds the HeroDetailComponent as a declaration in the @NgModule decorator of the src/app/app.module.ts file.



*/